{"version":3,"sources":["axios.js","components/MovieRow.js","request.js","components/Banner.js","components/Nav.js","App.js","serviceWorker.js","index.js"],"names":["whatever","axios","create","baseURL","MovieRow","title","movieUrl","isLarge","useState","movies","setMovies","useEffect","a","get","request","data","results","fetchData","className","map","movie","src","poster_path","backdrop_path","alt","name","apiKey","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","Math","floor","random","length","style","backgroundImage","backgroundSize","backgroundPosition","overview","Nav","show","setShow","window","addEventListener","scrollY","removeEventListener","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.35312a0f.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst whatever = axios.create({\r\n  baseURL: \"https://api.themoviedb.org/3\",\r\n});\r\n\r\nexport default whatever;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport axios from \"../axios\";\r\nimport \"./MovieRow.css\";\r\n\r\nfunction MovieRow({ title, movieUrl, isLarge }) {\r\n  const movieURLOne = \"https://image.tmdb.org/t/p/original/\";\r\n  const [movies, setMovies] = useState([]);\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const request = await axios.get(movieUrl);\r\n      setMovies(request.data.results);\r\n      return request;\r\n    }\r\n    fetchData();\r\n  }, [movieUrl]);\r\n  return (\r\n    <div className=\"container\">\r\n      <h2>{title}</h2>\r\n      <div className=\"images\">\r\n        {movies.map((movie) => (\r\n          <img\r\n            className={`image-alone ${isLarge && \"row-is-large\"}`}\r\n            src={`${movieURLOne}${\r\n              isLarge ? movie.poster_path : movie.backdrop_path\r\n            }`}\r\n            alt={movie.name}\r\n            title={movie.name}\r\n          ></img>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MovieRow;\r\n","const apiKey = \"349768c45732e19d28104b154c2ff76a\";\r\n\r\nconst requests = {\r\n  fetchTrending: `/trending/all/week?api_key=${apiKey}&language=en-US`,\r\n  fetchNetflixOriginals: `/discover/tv?api_key=${apiKey}&with_networks=213`,\r\n  fetchTopRated: `/movie/top_rated?api_key=${apiKey}&language=en-US`,\r\n  fetchActionMovies: `/discover/movie?api_key=${apiKey}&with_genres=28`,\r\n  fetchComedyMovies: `/discover/movie?api_key=${apiKey}&with_genres=35`,\r\n  fetchHorrorMovies: `/discover/movie?api_key=${apiKey}&with_genres=27`,\r\n  fetchRomanceMovies: `/discover/movie?api_key=${apiKey}&with_genres=10749`,\r\n  fetchDocumentaries: `/discover/movie?api_key=${apiKey}&with_genres=99`,\r\n};\r\n\r\nexport default requests;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport axios from \"../axios\";\r\nimport \"./Banner.css\";\r\nimport requests from \"../request\";\r\n\r\nfunction Banner() {\r\n  const [movies, setMovies] = useState([]);\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const request = await axios.get(requests.fetchNetflixOriginals);\r\n      setMovies(\r\n        request.data.results[\r\n          Math.floor(Math.random() * request.data.results.length - 1)\r\n        ]\r\n      );\r\n      return request;\r\n    }\r\n    fetchData();\r\n  }, []);\r\n  return (\r\n    <header\r\n      className=\"banner\"\r\n      style={{\r\n        backgroundImage: `url(\"https://image.tmdb.org/t/p/original/${movies.backdrop_path}\")`,\r\n        backgroundSize: \"cover\",\r\n        backgroundPosition: \"center center\",\r\n      }}\r\n    >\r\n      <div className=\"banner-container\">\r\n        <h2 className=\"movie-title\">{movies.name}</h2>\r\n        <div className=\"button\">\r\n          <button>Play</button>\r\n          <button>My List</button>\r\n        </div>\r\n        <h3 className=\"movie-description\">{movies.overview}</h3>\r\n      </div>\r\n      <div className=\"gradients\"></div>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Banner;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./Nav.css\";\r\n\r\nexport default function Nav() {\r\n  const [show, setShow] = useState(false);\r\n  useEffect(() => {\r\n    window.addEventListener(\"scroll\", () => {\r\n      if (window.scrollY > 100) {\r\n        setShow(true);\r\n      } else {\r\n        setShow(false);\r\n      }\r\n    });\r\n    return () => {\r\n      window.removeEventListener(\"scroll\");\r\n    };\r\n  }, []);\r\n  return (\r\n    <div className={`nav-bar ${show && \"new-nav-bar\"}`}>\r\n      <img\r\n        src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/0/0f/Logo_Netflix.png/640px-Logo_Netflix.png\"\r\n        alt=\"netflix-logo\"\r\n        className=\"netflix-photo\"\r\n      ></img>\r\n      <img\r\n        src=\"https://i.pinimg.com/originals/0d/dc/ca/0ddccae723d85a703b798a5e682c23c1.png\"\r\n        alt=\"profile\"\r\n        className=\"profile-photo\"\r\n      ></img>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\nimport MovieRow from \"./components/MovieRow\";\nimport requests from \"./request\";\nimport Banner from \"./components/Banner\";\nimport Nav from \"./components/Nav\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Nav />\n      <Banner />\n      <MovieRow\n        title=\"Netflix Originals\"\n        movieUrl={requests.fetchNetflixOriginals}\n        isLarge\n      />\n      <MovieRow title=\"Trending\" movieUrl={requests.fetchTrending} />\n      <MovieRow title=\"Top Rated\" movieUrl={requests.fetchTopRated} />\n      <MovieRow title=\"Action Movies\" movieUrl={requests.fetchActionMovies} />\n      <MovieRow title=\"Comedy Movies\" movieUrl={requests.fetchComedyMovies} />\n      <MovieRow title=\"Horror Movies\" movieUrl={requests.fetchHorrorMovies} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}